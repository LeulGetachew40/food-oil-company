// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  firstName  String
  lastName   String
  phone      String?
  role       UserRole   @default(CUSTOMER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  addresses  Address[]
  orders     Order[]
  reviews    Review[]
  deliveries Delivery[] @relation("DeliveryPerson")

  @@map("users")
}

enum UserRole {
  ADMIN
  CUSTOMER
  DELIVERY_PERSON
}

model Product {
  id             String      @id @default(uuid())
  name           String
  description    String
  price          Decimal     @db.Decimal(10, 2)
  stockQuantity  Int
  minimumStock   Int         @default(10)
  image          String?
  oilType        String
  source         String
  organic        Boolean     @default(false)
  coldPressed    Boolean     @default(false)
  volumeInLiters Decimal     @db.Decimal(10, 2)
  categoryId     String
  category       Category    @relation(fields: [categoryId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  orderItems     OrderItem[]
  reviews        Review[]

  @@map("products")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  status        OrderStatus   @default(PENDING)
  total         Decimal       @db.Decimal(10, 2)
  addressId     String
  address       Address       @relation(fields: [addressId], references: [id])
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  orderItems    OrderItem[]
  delivery      Delivery?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  READY_FOR_DELIVERY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  orders     Order[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("addresses")
}

model Delivery {
  id               String         @id @default(uuid())
  orderId          String         @unique
  order            Order          @relation(fields: [orderId], references: [id])
  deliveryPersonId String
  deliveryPerson   User           @relation("DeliveryPerson", fields: [deliveryPersonId], references: [id])
  status           DeliveryStatus @default(ASSIGNED)
  startTime        DateTime?
  endTime          DateTime?
  notes            String?
  latitude         Float?
  longitude        Float?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("deliveries")
}

enum DeliveryStatus {
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  FAILED
  RESCHEDULED
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}
